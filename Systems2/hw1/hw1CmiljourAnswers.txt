On cdmlinux ssh server 140.192.36.186
question 3:  
    a. insertionSort : Run 1 - 31.79 ; Run 2 - 31.42
    b. quickSort     : Run 1 -  0.04 ; Run 2 - 0.03
question 4:  
    a. insertionSort : Run 1 - 15.22 ; Run 2 - 15.78
    b. quickSort     : Run 1 - 0.01  ; Run 2 - 0.01
question 5:  Using the more efficient algorithm!

question 6:  

A) objdump -d -j .rodata assign1-0
Result - 
0000000000001268 <_IO_stdin_used>:
    1268:	01 00 02 00 00 00 00 00 50 6c 65 61 73 65 20 65     ........Please e
    1278:	6e 74 65 72 20 25 73 20 66 6f 72 20 28 25 64 20     nter %s for (%d 
    1288:	2d 20 25 64 29 00 6e 75 6d 62 65 72 20 6f 66 20     - %d).number of 
    1298:	73 74 72 69 6e 67 73 00 6c 65 6e 67 74 68 20 6f     strings.length o
    12a8:	66 20 65 61 63 68 20 73 74 72 69 6e 67 00 00 00     f each string...
    12b8:	31 20 66 6f 72 20 69 6e 73 65 72 74 69 6f 6e 20     1 for insertion 
    12c8:	73 6f 72 74 20 6f 72 20 32 20 66 6f 72 20 71 75     sort or 2 for qu
    12d8:	69 63 6b 73 6f 72 74 00                             icksort.

B)  objdump -d -j .text assign1-0
Result -
0000000000000cc9 <releaseMem>:
     cc9:	55                   	push   %rbp
     cca:	48 89 e5             	mov    %rsp,%rbp
     ccd:	48 83 ec 20          	sub    $0x20,%rsp
     cd1:	ff 15 f9 12 20 00    	callq  *0x2012f9(%rip)        # 201fd0 <mcount@GLIBC_2.2.5>
     cd7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
     cdb:	89 75 e4             	mov    %esi,-0x1c(%rbp)
     cde:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%rbp)
     ce5:	eb 23                	jmp    d0a <releaseMem+0x41>
     ce7:	8b 45 fc             	mov    -0x4(%rbp),%eax
     cea:	48 98                	cltq   
     cec:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
     cf3:	00 
     cf4:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     cf8:	48 01 d0             	add    %rdx,%rax
     cfb:	48 8b 00             	mov    (%rax),%rax
     cfe:	48 89 c7             	mov    %rax,%rdi
     d01:	e8 5a fb ff ff       	callq  860 <free@plt>
     d06:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
     d0a:	8b 45 fc             	mov    -0x4(%rbp),%eax
     d0d:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
     d10:	7c d5                	jl     ce7 <releaseMem+0x1e>
     d12:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     d16:	48 89 c7             	mov    %rax,%rdi
     d19:	e8 42 fb ff ff       	callq  860 <free@plt>
     d1e:	90                   	nop
     d1f:	c9                   	leaveq 
     d20:	c3                   	retq   

C)  objdump -d -j .bss assign1-0
Result - 
0000000000202090 <strLen>:
	...

D) choice in main() can't be found because it is a put into memory at program runtime on the stack

question 7:  

Optimization 1:  In insertion sort, the loop "for (j = i+1;  j < arrayLen;  j++)" is represented below.  The optimized version stores the arrayLen in a register instead of moving it from the stack every time the compare is need as in the unoptimized version.  This saves ton of time in a loop.

In insertion sort:

Optimized assign1-2
df4:	e8 57 fd ff ff       	callq  b50 <swap>
     df9:	49 83 c6 01          	add    $0x1,%r14
     dfd:	4d 39 f4             	cmp    %r14,%r12
     e00:	75 ce                	jne    dd0 <insertionSort+0x60>

Unoptimized assign1-0
75:	e8 e0 fb ff ff       	callq  a5a <swap>
     e7a:	83 45 fc 01          	addl   $0x1,-0x4(%rbp)
     e7e:	8b 45 fc             	mov    -0x4(%rbp),%eax
     e81:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
     e84:	7c 95                	jl     e1b <insertionSort+0x29>

Optimization 2:  In this line of insertion sort "if ( strncmp(array[i],array[j],strLen) > 0 )",  Check out the amount of instructions required in the unoptimized version versus the optimized version below. Almost 5x the amount of instructions. Moving variables to registers for comparison instead of stack to register for comparisons in a loop save tons of time.

Optimized assign1-2
     dd7:	4b 8b 34 f7          	mov    (%r15,%r14,8),%rsi
     ddb:	49 8b 7c df f8       	mov    -0x8(%r15,%rbx,8),%rdi
     de0:	e8 bb fa ff ff       	callq  8a0 <strncmp@plt>
     de5:	85 c0                	test   %eax,%eax
     de7:	7e 10                	jle    df9 <insertionSort+0x89>

Unoptimized assign1-0
     e31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     e35:	48 01 c8             	add    %rcx,%rax
     e38:	48 8b 08             	mov    (%rax),%rcx
     e3b:	8b 45 f8             	mov    -0x8(%rbp),%eax
     e3e:	48 98                	cltq   
     e40:	48 8d 34 c5 00 00 00 	lea    0x0(,%rax,8),%rsi
     e47:	00 
     e48:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
     e4c:	48 01 f0             	add    %rsi,%rax
     e4f:	48 8b 00             	mov    (%rax),%rax
     e52:	48 89 ce             	mov    %rcx,%rsi
     e55:	48 89 c7             	mov    %rax,%rdi
     e58:	e8 23 fa ff ff       	callq  880 <strncmp@plt>
     e5d:	85 c0                	test   %eax,%eax
     e5f:	7e 19                	jle    e7a <insertionSort+0x88>





